{"version":3,"sources":["MapChart.js","App.js","reportWebVitals.js","index.js"],"names":["MapChart","setTooltipContent","selectedYear","useState","CO2Data","setCO2Data","useEffect","getCO2","fetch","then","response","json","responseJson","catch","error","console","colorScale","scaleQuantize","domain","range","data-tip","projectionConfig","scale","style","width","height","geography","geographies","map","geo","countryIso","properties","NAME","ISO_A3","currentCountryData","Object","entries","reduce","acc","curr","yearData","data","filter","year","onMouseEnter","tooltipText","length","key","value","split","join","handleMouseEnter","onMouseLeave","stroke","fill","hover","outline","rsmKey","memo","App","setSelectedYear","content","setContent","className","variant","Slider","defaultValue","aria-labelledby","step","onChange","event","newValue","parseInt","min","max","marks","label","valueLabelDisplay","getAriaValueText","class","html","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a067f830.chunk.js","sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\";\nimport { scaleQuantize } from \"d3-scale\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ setTooltipContent, selectedYear }) => {\n  const [CO2Data, setCO2Data] = useState({});\n\n  useEffect(() => {\n    getCO2();\n  }, []);\n\n  const getCO2 = () =>\n    fetch(\n      \"https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.json\"\n    )\n      .then((response) => response.json())\n      .then((responseJson) => {\n        setCO2Data(responseJson);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n\n  const findCountryData = (countryIso) => {\n    return Object.entries(CO2Data).reduce((acc, [key, curr]) => {\n      if (curr[\"iso_code\"] === countryIso) {\n        const yearData = curr.data.filter((year) => year.year === selectedYear);\n        acc = [...acc, ...yearData];\n      }\n      return acc;\n    }, []);\n  };\n\n  const colorScale = scaleQuantize()\n    .domain([1, 10])\n    .range([\n      \"#ffedea\",\n      \"#ffcec5\",\n      \"#ffad9f\",\n      \"#ff8a75\",\n      \"#ff5533\",\n      \"#e2492d\",\n      \"#be3d26\",\n      \"#9a311f\",\n      \"#782618\",\n    ]);\n\n  const handleMouseEnter = (currentCountryData, NAME) => {\n    let tooltipText = \"No data available\";\n    if (currentCountryData.length > 0) {\n      const value = Object.entries(currentCountryData[0]).map(\n        ([key, value]) => `${key.split(\"_\").join(\" \")} : ${value}`\n      );\n      tooltipText = value.join(\", \");\n    }\n    setTooltipContent(`${NAME} <br /> <br /> ${tooltipText}`);\n  };\n  return (\n    <>\n      <ComposableMap\n        data-tip=\"\"\n        projectionConfig={{ scale: 170 }}\n        style={{ width: \"450px\", height: \"auto\" }}\n      >\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                const { NAME, ISO_A3 } = geo.properties;\n                const currentCountryData = findCountryData(ISO_A3);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      handleMouseEnter(currentCountryData, NAME);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                    }}\n                    stroke=\"black\"\n                    fill={\n                      currentCountryData[0]\n                        ? colorScale(currentCountryData[0][\"co2\"])\n                        : \"black\"\n                    }\n                    width={300}\n                    height={300}\n                    style={{\n                      hover: {\n                        fill: \"#b6bee3\",\n                        outline: \"#b6bee3\",\n                      },\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { Slider } from \"@material-ui/core\";\nimport MapChart from \"./MapChart\";\nimport ReactTooltip from \"react-tooltip\";\n\nfunction App() {\n  const [selectedYear, setSelectedYear] = useState(1990);\n  const [content, setContent] = useState(\"\");\n\n  const handleChange = (event, newValue) => {\n    setSelectedYear(parseInt(newValue));\n  };\n\n  const marks = [\n    {\n      value: 1990,\n      label: \"1990\",\n    },\n    {\n      value: 2018,\n      label: \"2018\",\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <h1 variant=\"h1\">{`CO2 Emissions By Year ${selectedYear}`}</h1>\n      <div className=\"opus-slider-container\">\n        <Slider\n          defaultValue={1990}\n          aria-labelledby=\"discrete-slider-always\"\n          step={1}\n          value={selectedYear ? selectedYear : 1990}\n          onChange={handleChange}\n          min={1990}\n          max={2018}\n          marks={marks}\n          valueLabelDisplay=\"on\"\n          getAriaValueText={(value) => value}\n        />\n      </div>\n      <MapChart setTooltipContent={setContent} selectedYear={selectedYear} />\n      <ReactTooltip class=\"tooltip\" html={true}>\n        {content}\n      </ReactTooltip>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}